from typing import Union, Tuple
import pathlib
import numpy as np
import pandas as pd
import json
import math

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname=pathlib.Path(data_fname)
        
    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        for file in self.data_fname.iterdir():
            if str(file).endswith(".json"):
                self.data=json.loads(file.read_text())

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
    Number of people in a given bin
    bins : np.ndarray
    Bin edges
        """
        ages=[]
        self.read_data()
        for i in self.data:
            if isinstance(i["age"],Union[int,float]):
                ages.append(i["age"])

        bins=np.linspace([0,10],[90,100],10)
        nums=np.zeros(shape=(len(bins),))

        for i, (num,bin) in enumerate(zip(nums,bins)):
            for age in ages:
                if age in range(int(bin[0]),int(bin[1])):
                    nums[i]+=1

        return (nums,bins)
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        self.read_data()
        df=pd.DataFrame(self.data)
        df=df[df["email"].str.count('@')==1]
        df=df[~df["email"].str.startswith(("@","."))]
        df=df[~df["email"].str.endswith(("@","."))]
        df[~df["email"].str.contains(r'@\.')]
        return df.reset_index(drop=True)
    

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
            """    
        self.read_data() 
        df=pd.DataFrame(self.data)
        qs=["q1","q2","q3","q4","q5"]
        df_qs=df.loc[:,qs]
        index=np.where(df_qs=="nan")[0]
        df_qs.replace("nan", np.nan, inplace=True)
        df_qs=df_qs.T.fillna(df_qs.mean(axis=1)).T
        df[qs]=df_qs
        return (df,index)
        
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        self.read_data() 
        df=pd.DataFrame(self.data)
        qs=["q1","q2","q3","q4","q5"]
        df_qs=df.loc[:,qs]
        df_qs.replace("nan", np.nan, inplace=True)
        for i, row in enumerate(df_qs.iterrows()):
            if row[1].isna().sum()>maximal_nans_per_sub:
                df.loc[i,"score"]=np.nan
            else:
                df.loc[i,"score"]=math.trunc(row[1].mean())
        df['score'] = df['score'].astype(pd.UInt8Dtype())
        return df
